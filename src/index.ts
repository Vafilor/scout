import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent, protocol, net } from 'electron';
import { readdir, stat, readFile, mkdir } from "node:fs/promises";
import { basename, resolve, sep, extname } from "node:path";
import { AppFile, HeicFileResponse, ReaddirOptions } from './types/filesystem';
import Store from './configuration/store';
import * as fswin from "fswin";
import { fileExists } from './server/filesystem';
import WorkerPool from './workers/worker-pool';
import os from 'node:os';
import { TaskAction } from './workers/types';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const pool = new WorkerPool(os.availableParallelism());

function formatWindowsAppURL(url: string): string {
  if (url.length === 1) {
    return url + ":/";
  }

  return url.charAt(0) + ":" + url.substring(1);
}

function formatIxAppURL(url: string) {
  return url;
}

function formatWindowsDriveName(drive: string, label: string): string {
  if (label === "") {
    return drive + ":";
  }

  return `${label} (${drive}:)`;
}

async function filesystemList(event: IpcMainInvokeEvent, path: string, options: ReaddirOptions) {
  if (path === "/" && process.platform === "win32") {
    const result: AppFile[] = [];
    const drives = fswin.getLogicalDriveListSync();
    for (const drive of Object.keys(drives)) {
      const volumeInfo = fswin.getVolumeInformationSync(drive + ":\\\\");
      result.push({
        name: formatWindowsDriveName(drive, volumeInfo.LABEL),
        path: drive + ":\\",
        isFile: false
      })
    }

    return result;
  }
  const files = await readdir(path, { ...options, withFileTypes: true });

  return files.map(file => ({
    ...file,
    path: resolve(file.path, file.name),
    isFile: file.isFile()
  }));
}

async function filesystemFileStat(event: IpcMainInvokeEvent, path: string): Promise<AppFile> {
  const result = await stat(path);

  return {
    path,
    name: basename(path),
    isFile: result.isFile(),
    size: result.size
  };
}

async function filesystemGetTextFileContext(event: IpcMainInvokeEvent, path: string): Promise<string> {
  return readFile(path, { encoding: "utf-8" });
}

async function filesystemGetImageIconPath(event: IpcMainInvokeEvent, path: string, width: number, height: number): Promise<string> {
  const home = app.getPath('userData');
  const imageCache = resolve(home, "image_cache");

  const ext = extname(path);
  const outputPath = path.slice(0, path.length - ext.length) + ".jpg"
  const formattedPath = outputPath.replaceAll(sep, "_");

  const cachedFilePath = resolve(imageCache, formattedPath);

  if (await fileExists(cachedFilePath)) {
    return cachedFilePath;
  }

  // Cached file does not exist, create it.

  return new Promise((resolve) => {
    pool.runTask({
      type: TaskAction.CreateIcon,
      inputPath: path,
      outputPath: cachedFilePath,
      width,
      height
    }, (err) => {
      if (err) {
        console.error(err);
        return;
      }

      resolve(cachedFilePath);
    });
  });
}

async function filesystemGetHeicFile(event: IpcMainInvokeEvent, path: string): Promise<HeicFileResponse> {
  return new Promise((resolve) => {
    pool.runTask({
      type: TaskAction.LoadHeicData,
      path,
    }, (err: any, result: any) => {
      resolve(result);
    });
  });
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Allow showing filesystem images and videos in app.
protocol.registerSchemesAsPrivileged([
  { scheme: 'app', privileges: { bypassCSP: true, stream: true } }
]);

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(async () => {
  const userDataPath = app.getPath('userData');
  const store = new Store(resolve(userDataPath, "configuration.json"));

  const imageCache = resolve(userDataPath, "image_cache");
  if (!await fileExists(imageCache)) {
    await mkdir(imageCache)
  }

  ipcMain.handle('filesystem-list', filesystemList);
  ipcMain.handle('filesystem-get-text-file', filesystemGetTextFileContext);
  ipcMain.handle('filesystem-file-stat', filesystemFileStat);
  ipcMain.handle('filesystem-get-home-directory', () => app.getPath('home'));
  ipcMain.handle('filesystem-get-image-icon-path', filesystemGetImageIconPath)
  ipcMain.handle('config-get', store.getOptions.bind(store));
  ipcMain.handle('config-update', store.update.bind(store));

  ipcMain.handle('filesystem-get-heic-file', filesystemGetHeicFile);

  const formatAppURL = process.platform === "win32" ? formatWindowsAppURL : formatIxAppURL;

  protocol.handle('app', (request) => {
    const url = request.url.slice('app://'.length);

    return net.fetch("file://" + formatAppURL(url));
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
